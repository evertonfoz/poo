using System.Diagnostics.CodeAnalysis;

namespace Associations.Domain.Guards;

/// <summary>
/// Classe est√°tica que fornece m√©todos de valida√ß√£o (Guard Clauses) para proteger o c√≥digo contra estados inv√°lidos.
/// </summary>
/// <remarks>
/// <para>
/// <b>üìö Para iniciantes:</b> Um "Guard" (guardi√£o) √© um padr√£o de programa√ß√£o defensiva que valida 
/// condi√ß√µes antes de executar uma opera√ß√£o. Pense em um seguran√ßa na entrada de um evento que verifica 
/// se voc√™ tem ingresso v√°lido antes de permitir a entrada.
/// </para>
/// <para>
/// <b>üéØ Objetivo:</b> Centralizar a valida√ß√£o de argumentos nulos, evitando c√≥digo repetitivo de 
/// verifica√ß√£o em v√°rios lugares da aplica√ß√£o e garantindo falhas r√°pidas (fail-fast) quando dados 
/// inv√°lidos s√£o detectados.
/// </para>
/// <para>
/// <b>üí° Por que usar Guard Clauses?</b>
/// </para>
/// <list type="bullet">
/// <item><description>Detecta erros imediatamente no ponto de entrada, n√£o ap√≥s v√°rias opera√ß√µes</description></item>
/// <item><description>Torna o c√≥digo mais limpo e leg√≠vel, eliminando if's repetitivos</description></item>
/// <item><description>Fornece mensagens de erro mais claras sobre qual par√¢metro causou o problema</description></item>
/// <item><description>Segue o princ√≠pio de "falhar r√°pido" (Fail Fast), evitando propaga√ß√£o de erros</description></item>
/// </list>
/// <para>
/// <b>üîß T√©cnico:</b> Esta classe implementa o padr√£o Guard Clause usando m√©todos gen√©ricos com 
/// anota√ß√µes de nullability do C# moderno. Os atributos <see cref="DynamicallyAccessedMembersAttribute"/> 
/// e <see cref="NotNullAttribute"/> auxiliam a an√°lise est√°tica do compilador e ferramentas de an√°lise 
/// de c√≥digo para detectar poss√≠veis problemas em tempo de compila√ß√£o.
/// </para>
/// </remarks>
/// <example>
/// <b>Exemplo de uso b√°sico:</b>
/// <code>
/// public class Pedido
/// {
///     private readonly Cliente _cliente;
///     
///     public Pedido(Cliente cliente)
///     {
///         // Valida que o cliente n√£o seja nulo antes de usar
///         Guard.AgainstNull(ref cliente, nameof(cliente));
///         _cliente = cliente;
///     }
/// }
/// </code>
/// 
/// <b>O que acontece se passar null:</b>
/// <code>
/// // Isso lan√ßar√° ArgumentNullException com mensagem clara
/// var pedido = new Pedido(null); 
/// // Exception: Value cannot be null. (Parameter 'cliente')
/// </code>
/// </example>
public static class Guard
{
    /// <summary>
    /// Valida se o valor fornecido n√£o √© nulo, lan√ßando uma exce√ß√£o caso seja.
    /// </summary>
    /// <typeparam name="T">
    /// O tipo do valor a ser validado. Pode ser qualquer tipo de refer√™ncia ou tipo nullable.
    /// </typeparam>
    /// <param name="value">
    /// O valor a ser validado contra nulo. Passado por refer√™ncia (ref) para permitir que o 
    /// compilador atualize informa√ß√µes de nullability ap√≥s a valida√ß√£o bem-sucedida.
    /// </param>
    /// <param name="paramName">
    /// O nome do par√¢metro sendo validado. Use o operador <c>nameof()</c> para obter o nome 
    /// automaticamente e evitar erros de digita√ß√£o.
    /// </param>
    /// <exception cref="ArgumentNullException">
    /// Lan√ßada quando <paramref name="value"/> √© nulo. A exce√ß√£o incluir√° o 
    /// <paramref name="paramName"/> na mensagem de erro para facilitar a depura√ß√£o.
    /// </exception>
    /// <remarks>
    /// <para>
    /// <b>üìö Para iniciantes:</b> Este m√©todo verifica se um objeto √© nulo (n√£o existe/n√£o foi criado) 
    /// antes de voc√™ tentar us√°-lo. √â como verificar se h√° √°gua em um copo antes de tentar beber - 
    /// se estiver vazio (nulo), o m√©todo avisa imediatamente ao inv√©s de deixar voc√™ "beber do copo vazio" 
    /// e causar um erro mais tarde.
    /// </para>
    /// <para>
    /// <b>üîç O que significa "ref"?</b> O par√¢metro <c>ref</c> permite que o m√©todo informe ao compilador 
    /// que, ap√≥s esta verifica√ß√£o passar, o valor definitivamente n√£o ser√° nulo. Isso melhora a 
    /// an√°lise de c√≥digo e evita avisos desnecess√°rios de nullability.
    /// </para>
    /// <para>
    /// <b>üéØ Quando usar:</b> Use este m√©todo no in√≠cio de construtores, m√©todos e propriedades sempre 
    /// que receber par√¢metros que n√£o devem ser nulos. √â especialmente importante em:
    /// </para>
    /// <list type="bullet">
    /// <item><description>Construtores que recebem depend√™ncias</description></item>
    /// <item><description>M√©todos p√∫blicos que recebem objetos como par√¢metros</description></item>
    /// <item><description>Setters de propriedades que n√£o aceitam valores nulos</description></item>
    /// <item><description>M√©todos de valida√ß√£o de modelo/entidade</description></item>
    /// </list>
    /// <para>
    /// <b>üîß Aspectos t√©cnicos:</b>
    /// </para>
    /// <list type="bullet">
    /// <item>
    /// <description>
    /// O atributo <c>[DynamicallyAccessedMembers(0)]</c> no tipo gen√©rico T indica que o m√©todo 
    /// n√£o requer acesso reflexivo aos membros do tipo, otimizando cen√°rios de trimming e AOT.
    /// </description>
    /// </item>
    /// <item>
    /// <description>
    /// O atributo <c>[NotNull]</c> no par√¢metro value informa ao analisador de c√≥digo que, 
    /// ap√≥s este m√©todo retornar (n√£o lan√ßar exce√ß√£o), o valor n√£o ser√° nulo.
    /// </description>
    /// </item>
    /// <item>
    /// <description>
    /// O uso de <c>ref T?</c> permite que o compilador ajuste o estado de nullability da 
    /// vari√°vel no c√≥digo chamador ap√≥s a verifica√ß√£o.
    /// </description>
    /// </item>
    /// <item>
    /// <description>
    /// O m√©todo √© gen√©rico para aceitar qualquer tipo de refer√™ncia, evitando boxing/unboxing 
    /// e mantendo type-safety.
    /// </description>
    /// </item>
    /// </list>
    /// </remarks>
    /// <example>
    /// <b>Exemplo 1: Valida√ß√£o em m√©todo p√∫blico</b>
    /// <code>
    /// public void ProcessarPedido(Pedido pedido)
    /// {
    ///     Guard.AgainstNull(ref pedido, nameof(pedido));
    ///     
    ///     // Agora √© seguro usar pedido
    ///     pedido.Processar();
    /// }
    /// </code>
    /// 
    /// <b>Exemplo 2: M√∫ltiplas valida√ß√µes</b>
    /// <code>
    /// public void CriarRelatorio(Cliente cliente, Periodo periodo, Formato formato)
    /// {
    ///     Guard.AgainstNull(ref cliente, nameof(cliente));
    ///     Guard.AgainstNull(ref periodo, nameof(periodo));
    ///     Guard.AgainstNull(ref formato, nameof(formato));
    ///     
    ///     // Todos os par√¢metros foram validados
    ///     // Prosseguir com a l√≥gica de neg√≥cio
    /// }
    /// </code>
    /// 
    /// <b>Exemplo 3: O que acontece ao passar null</b>
    /// <code>
    /// string? texto = null;
    /// 
    /// try
    /// {
    ///     Guard.AgainstNull(ref texto, nameof(texto));
    /// }
    /// catch (ArgumentNullException ex)
    /// {
    ///     Console.WriteLine(ex.Message);
    ///     // Sa√≠da: Value cannot be null. (Parameter 'texto')
    /// }
    /// </code>
    /// </example>
    /// <seealso cref="ArgumentNullException"/>
    /// <seealso cref="NotNullAttribute"/>
    /// <seealso cref="DynamicallyAccessedMembersAttribute"/>
    public static void AgainstNull<[DynamicallyAccessedMembers(0)] T>(
        [NotNull] ref T? value, string paramName)
    {
        if (value is null)
            throw new ArgumentNullException(paramName);
    }

    public static bool TryParseNonEmpty(string? s, 
        [NotNullWhen(true)] out string? result)
    {
        if (!string.IsNullOrWhiteSpace(s)) { result = s; return true; }
        result = null; return false;
    }
}